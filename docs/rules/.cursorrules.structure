# 项目结构和文件组织规范

## 标准项目结构

### 整体目录结构
```
MilesXWalkerStudio/
├── public/                    # 静态资源
│   ├── favicon.ico
│   ├── images/
│   └── icons/
├── src/                       # 源代码
│   ├── components/            # 组件目录
│   │   ├── base/             # 基础UI组件
│   │   ├── business/         # 业务组件
│   │   ├── layout/           # 布局组件
│   │   └── effects/          # 特效组件
│   ├── views/                # 页面组件
│   │   ├── auth/             # 认证相关页面
│   │   ├── dashboard/        # 控制台页面
│   │   ├── user/             # 用户相关页面
│   │   └── admin/            # 管理员页面
│   ├── layouts/              # 布局模板
│   │   ├── DefaultLayout.vue
│   │   ├── AuthLayout.vue
│   │   └── DashboardLayout.vue
│   ├── router/               # 路由配置
│   │   ├── index.ts
│   │   ├── guards.ts
│   │   └── routes/
│   ├── stores/               # 状态管理
│   │   ├── modules/
│   │   ├── plugins/
│   │   └── types/
│   ├── composables/          # 组合式函数
│   │   ├── useAuth.ts
│   │   ├── useApi.ts
│   │   └── useTheme.ts
│   ├── utils/                # 工具函数
│   │   ├── helpers.ts
│   │   ├── constants.ts
│   │   └── validators.ts
│   ├── lib/                  # 库文件
│   │   ├── api.ts
│   │   ├── utils.ts
│   │   └── types.ts
│   ├── styles/               # 样式文件
│   │   ├── globals.css
│   │   ├── components/
│   │   ├── utilities/
│   │   └── themes/
│   ├── assets/               # 资源文件
│   │   ├── images/
│   │   ├── icons/
│   │   └── fonts/
│   ├── types/                # 类型定义
│   │   ├── api.ts
│   │   ├── user.ts
│   │   └── global.ts
│   ├── plugins/              # 插件配置
│   │   ├── pinia.ts
│   │   └── router.ts
│   ├── App.vue               # 根组件
│   ├── main.ts               # 应用入口
│   └── README.md             # 源码说明
├── docs/                     # 项目文档
│   ├── development.md        # 开发指南
│   ├── deployment.md         # 部署指南
│   └── api.md               # API文档
├── tests/                    # 测试文件
│   ├── unit/                # 单元测试
│   ├── integration/         # 集成测试
│   └── e2e/                 # E2E测试
├── .vscode/                  # VS Code配置
│   ├── settings.json
│   └── extensions.json
├── package.json              # 项目配置
├── vite.config.ts           # Vite配置
├── tailwind.config.ts       # Tailwind配置
├── tsconfig.json            # TypeScript配置
├── .eslintrc.ts             # ESLint配置
├── .gitignore               # Git忽略文件
├── .cursorrules             # 主规则文件
├── .cursorrules.*           # 专门规则文件
├── README.md                # 项目说明
└── DEPLOYMENT.md            # 部署说明
```

## 组件目录组织

### 组件分类规范
```
src/components/
├── base/                    # 基础UI组件
│   ├── Button/
│   │   ├── Button.vue
│   │   ├── types.ts
│   │   ├── index.ts
│   │   └── README.md
│   ├── Input/
│   ├── Modal/
│   ├── Toast/
│   └── Loading/
├── business/               # 业务组件
│   ├── UserProfile/
│   ├── ProductCard/
│   ├── ShoppingCart/
│   └── PaymentForm/
├── layout/                 # 布局组件
│   ├── Header/
│   ├── Sidebar/
│   ├── Footer/
│   └── Navigation/
├── effects/                # 特效组件
│   ├── Particles/
│   ├── Animations/
│   └── Transitions/
└── ui/                     # UI工具组件
    ├── Icon/
    ├── Avatar/
    └── Badge/
```

### 组件文件组织规范
```
ComponentName/
├── ComponentName.vue       # 主组件文件
├── types.ts               # 类型定义
├── index.ts              # 导出文件
├── hooks.ts              # 组件专用hooks（可选）
├── utils.ts              # 组件工具函数（可选）
├── styles.css            # 组件样式（可选）
├── tests/                # 组件测试
│   ├── ComponentName.test.ts
│   └── ComponentName.stories.ts
└── README.md             # 组件文档
```

### 组件导出规范
```typescript
// components/base/Button/index.ts
export { default as Button } from './Button.vue'
export type { ButtonProps, ButtonEmits } from './types'

// components/base/index.ts
export * from './Button'
export * from './Input'
export * from './Modal'

// components/index.ts
export * from './base'
export * from './business'
export * from './layout'
export * from './effects'
```

## 页面目录组织

### 页面文件结构
```
src/views/
├── auth/                   # 认证相关页面
│   ├── Login/
│   │   ├── Login.vue
│   │   ├── components/     # 页面专用组件
│   │   │   ├── LoginForm.vue
│   │   │   └── SocialLogin.vue
│   │   ├── composables/    # 页面专用组合式函数
│   │   │   └── useLogin.ts
│   │   └── README.md
│   ├── Register/
│   ├── ForgotPassword/
│   └── index.ts           # 路由导出
├── dashboard/             # 控制台页面
│   ├── Home/
│   ├── Analytics/
│   ├── Settings/
│   └── index.ts
├── user/                  # 用户相关页面
│   ├── Profile/
│   ├── Preferences/
│   └── index.ts
└── error/                 # 错误页面
    ├── 404.vue
    ├── 500.vue
    └── NetworkError.vue
```

### 页面组件模板
```vue
<!-- views/dashboard/Home/Home.vue -->
<template>
  <div class="dashboard-home">
    <!-- 页面头部 -->
    <header class="page-header">
      <h1 class="page-title">{{ $t('dashboard.home.title') }}</h1>
      <div class="page-actions">
        <Button @click="handleRefresh">刷新</Button>
      </div>
    </header>

    <!-- 页面内容 -->
    <main class="page-content">
      <div class="stats-grid">
        <StatsCard 
          v-for="stat in stats" 
          :key="stat.id"
          :title="stat.title"
          :value="stat.value"
          :trend="stat.trend"
        />
      </div>

      <div class="charts-section">
        <AnalyticsChart :data="chartData" />
      </div>
    </main>
  </div>
</template>

<script setup lang="ts">
/**
 * 控制台首页
 * 显示用户数据统计和分析图表
 * @author 开发者名称
 * @since 2024-01-01
 */

import { onMounted } from 'vue'
import { useDashboard } from './composables/useDashboard'
import StatsCard from './components/StatsCard.vue'
import AnalyticsChart from './components/AnalyticsChart.vue'

// 页面标题设置
useHead({
  title: '控制台首页'
})

// 使用页面逻辑
const {
  stats,
  chartData,
  isLoading,
  fetchDashboardData,
  handleRefresh
} = useDashboard()

// 页面初始化
onMounted(() => {
  fetchDashboardData()
})
</script>
```

## 工具函数组织

### utils目录结构
```
src/utils/
├── formatters/             # 格式化函数
│   ├── date.ts
│   ├── currency.ts
│   ├── number.ts
│   └── index.ts
├── validators/             # 验证函数
│   ├── form.ts
│   ├── email.ts
│   ├── phone.ts
│   └── index.ts
├── helpers/                # 辅助函数
│   ├── dom.ts
│   ├── storage.ts
│   ├── url.ts
│   └── index.ts
├── constants/              # 常量定义
│   ├── api.ts
│   ├── app.ts
│   ├── errors.ts
│   └── index.ts
├── types/                  # 通用类型
│   ├── common.ts
│   ├── api.ts
│   └── index.ts
└── index.ts               # 统一导出
```

### 工具函数规范
```typescript
// utils/formatters/date.ts
/**
 * 日期格式化工具函数
 */

import { format, formatDistanceToNow, parseISO } from 'date-fns'
import { zhCN } from 'date-fns/locale'

/**
 * 格式化日期
 * @param date 日期字符串或Date对象
 * @param pattern 格式模式
 * @returns 格式化后的日期字符串
 */
export const formatDate = (
  date: string | Date, 
  pattern: string = 'yyyy-MM-dd'
): string => {
  try {
    const dateObj = typeof date === 'string' ? parseISO(date) : date
    return format(dateObj, pattern, { locale: zhCN })
  } catch (error) {
    console.error('日期格式化失败:', error)
    return ''
  }
}

/**
 * 格式化相对时间
 * @param date 日期字符串或Date对象
 * @returns 相对时间字符串（如：2小时前）
 */
export const formatRelativeTime = (date: string | Date): string => {
  try {
    const dateObj = typeof date === 'string' ? parseISO(date) : date
    return formatDistanceToNow(dateObj, { 
      addSuffix: true, 
      locale: zhCN 
    })
  } catch (error) {
    console.error('相对时间格式化失败:', error)
    return ''
  }
}

// utils/index.ts - 统一导出
export * from './formatters'
export * from './validators'
export * from './helpers'
export * from './constants'
export * from './types'
```

## 类型定义组织

### 类型文件结构
```
src/types/
├── api/                   # API相关类型
│   ├── auth.ts
│   ├── user.ts
│   ├── product.ts
│   └── index.ts
├── components/            # 组件类型
│   ├── props.ts
│   ├── events.ts
│   └── index.ts
├── store/                 # Store类型
│   ├── user.ts
│   ├── app.ts
│   └── index.ts
├── global.ts              # 全局类型
├── env.ts                 # 环境变量类型
└── index.ts               # 统一导出
```

### 类型定义规范
```typescript
// types/api/user.ts
/**
 * 用户相关API类型定义
 */

// 基础用户信息
export interface User {
  id: string
  username: string
  email: string
  nickname?: string
  avatar?: string
  role: UserRole
  status: UserStatus
  createdAt: string
  updatedAt: string
}

// 用户角色枚举
export enum UserRole {
  ADMIN = 'admin',
  USER = 'user',
  MODERATOR = 'moderator'
}

// 用户状态枚举
export enum UserStatus {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  SUSPENDED = 'suspended'
}

// 登录请求参数
export interface LoginRequest {
  username: string
  password: string
  rememberMe?: boolean
}

// 登录响应数据
export interface LoginResponse {
  user: User
  token: string
  refreshToken: string
  expiresIn: number
}

// 用户更新请求参数
export interface UpdateUserRequest {
  nickname?: string
  email?: string
  avatar?: string
}

// API响应基础类型
export interface ApiResponse<T = any> {
  code: number
  message: string
  data: T
  timestamp: string
}

// 分页响应类型
export interface PaginatedResponse<T> {
  items: T[]
  total: number
  page: number
  pageSize: number
  totalPages: number
}
```

## 文档规范

### README.md模板
```markdown
# 组件/页面名称

## 功能描述
简要描述组件或页面的功能和用途。

## 使用方法
### 基础用法
\```vue
<template>
  <ComponentName 
    :prop1="value1"
    :prop2="value2"
    @event="handleEvent"
  />
</template>
\```

### 高级用法
\```vue
<!-- 高级用法示例 -->
\```

## API文档

### Props
| 属性名 | 类型 | 默认值 | 必填 | 说明 |
|--------|------|--------|------|------|
| prop1 | string | '' | 是 | 属性说明 |
| prop2 | number | 0 | 否 | 属性说明 |

### Events
| 事件名 | 参数 | 说明 |
|--------|------|------|
| event1 | (value: string) => void | 事件说明 |
| event2 | (data: object) => void | 事件说明 |

### Slots
| 插槽名 | 参数 | 说明 |
|--------|------|------|
| default | - | 默认插槽 |
| header | { title: string } | 头部插槽 |

## 开发说明
- 开发注意事项
- 已知问题
- 待优化项目

## 更新日志
- v1.0.0: 初始版本
- v1.1.0: 新增功能X
```

## 文件命名规范

### 命名约定
- **组件文件**: PascalCase，如 `UserProfile.vue`
- **页面文件**: PascalCase，如 `HomePage.vue`
- **工具文件**: camelCase，如 `dateUtils.ts`
- **常量文件**: SCREAMING_SNAKE_CASE，如 `API_CONSTANTS.ts`
- **类型文件**: camelCase，如 `userTypes.ts`
- **样式文件**: kebab-case，如 `global-styles.css`

### 目录命名规范
- **组件目录**: PascalCase，如 `Button/`, `UserProfile/`
- **页面目录**: PascalCase，如 `Dashboard/`, `UserCenter/`
- **工具目录**: camelCase，如 `utils/`, `helpers/`
- **功能目录**: camelCase，如 `composables/`, `stores/`

### 文件扩展名规范
- Vue组件: `.vue`
- TypeScript: `.ts`
- JavaScript: `.js`
- 样式文件: `.css`, `.scss`, `.less`
- 测试文件: `.test.ts`, `.spec.ts`
- 类型定义: `.d.ts`

## 导入路径规范

### 路径别名配置
```typescript
// vite.config.ts
export default defineConfig({
  resolve: {
    alias: {
      '@': path.resolve(__dirname, 'src'),
      '@components': path.resolve(__dirname, 'src/components'),
      '@views': path.resolve(__dirname, 'src/views'),
      '@utils': path.resolve(__dirname, 'src/utils'),
      '@stores': path.resolve(__dirname, 'src/stores'),
      '@types': path.resolve(__dirname, 'src/types'),
      '@assets': path.resolve(__dirname, 'src/assets'),
      '@styles': path.resolve(__dirname, 'src/styles')
    }
  }
})
```

### 导入顺序规范
```typescript
// 1. Node模块
import { ref, computed, onMounted } from 'vue'
import { useRouter } from 'vue-router'

// 2. 第三方库
import axios from 'axios'
import { format } from 'date-fns'

// 3. 项目内部模块（按层级排序）
import type { User } from '@types/user'
import { useUserStore } from '@stores/user'
import { formatDate } from '@utils/formatters'
import Button from '@components/base/Button/Button.vue'

// 4. 相对路径导入
import './styles.css'
import ChildComponent from './ChildComponent.vue'
``` 